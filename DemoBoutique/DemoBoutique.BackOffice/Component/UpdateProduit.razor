@using DemoBoutique.BackOffice.Services
@using DemoBoutique.Domain.Models
@inject ProduitServicecs _produitService

<EditForm @ref="myForm" Model="@produitPut" OnSubmit="OnSubmit">

    <div class="form-group row">
        <label for="nom" class="col-sm-2 col-form-label">Libelle</label>
        <div class="col-sm-10">
            <input type="text" @bind-value="produitPut.Libelle" class="form-control" id="inputLibelle">
        </div>
    </div>

    <div class="form-group row">
        <label for="nom" class="col-sm-2 col-form-label">Image</label>
        <div class="col-sm-10">
            <input type="text" @bind-value="produitPut.Image" class="form-control" id="inputImage">
        </div>
    </div>

    <div class="form-group row">
        <label for="nom" class="col-sm-2 col-form-label">Catégorie</label>
        <div class="col-sm-10">
            <DemoBoutique.BackOffice.Component.DropdownCategorie @bind-CategorieId="produitPut.CategorieId">

            </DemoBoutique.BackOffice.Component.DropdownCategorie>

        </div>
    </div>

    <div class="form-group row">
        <label for="nom" class="col-sm-2 col-form-label">Prix</label>
        <div class="col-sm-10">
            <input type="text" @bind-value="produitPut.Prix" class="form-control" id="inputPrix">
        </div>
    </div>
    <div class="modal-footer">

        <button type="submit" class="btn btn-primary">Enregistrer</button>

    </div>
</EditForm>
@code {
    [Parameter]
    public ProduitPutDtoscs produitPut { get; set; } = new ProduitPutDtoscs();
    EditForm myForm;

    [Parameter]
    public EventCallback OnSave { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
    }

    public async void OnSubmit()
    {
        await _produitService.Update(produitPut);
        await OnSave.InvokeAsync();
       // produit = new ProduitPostDtoscs();
    }
}
