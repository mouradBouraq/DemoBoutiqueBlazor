@* @inject DialogService DialogService
@inject NotificationService NotificationService *@
@using Component
@using DemoBoutique.BackOffice.Models
@using DemoBoutique.BackOffice.Services
@using DemoBoutique.Domain.Categorie

@inject CategorieServicecs _categorieServicecs

@page "/categorie"

<PageTitle>Categorie</PageTitle>

<h1>Categorie</h1>
@* <DemoBoutique.BackOffice.Component.DropdownCategorie @bind-CategorieId="sectedCategorieId"></DemoBoutique.BackOffice.Component.DropdownCategorie> *@
<div class="container">
    <div class="row">
        <div class="d-flex justify-content-end">
            <button class="btn btn-primary" @onclick="Add">Ajouter une catégorie</button>
        </div>
    </div>

    <div class="card">
        <div class="card-header"></div>
        <div class="card-body">

            <table class="table">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cat in categories)
                    {
                        <tr>
                            <td>@cat.Name</td>
                            <td>
                                <button type="button" class="btn btn-primary">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil" viewBox="0 0 16 16">
                                        <path d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325" />
                                    </svg>
                                </button>
                                <button type="button" class="btn btn-danger" @onclick="args=>Delete(cat.Id)">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"></path>
                                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"></path>
                                    </svg>
                                </button>

                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

    </div>
</div>

<MyModal @ref="modal" Title="My Modal" ShowSaveButton="true">
    <DemoBoutique.BackOffice.Component.AddCategorie OnSave="SaveModal" @ref="addCategorie">

    </DemoBoutique.BackOffice.Component.AddCategorie>
</MyModal>

@code {
    public int sectedCategorieId;
    MyModal modal;
    private AddCategorie addCategorie;
    public List<DemoBoutique.Domain.Categorie.Categorie> categories = new List<DemoBoutique.Domain.Categorie.Categorie>();

    [CascadingParameter]
    public Alert testCascading { get; set; }


    Alert alert = new Alert();
    [CascadingParameter]
    EventCallback<Alert> NotificationAlert { get; set; }


    protected override async Task OnInitializedAsync()
    {
        categories = await _categorieServicecs.All();
    }

    public async Task Delete(int id)
    {
        var result = await _categorieServicecs.Delete(id);
        if (result.IsSuccessStatusCode)
        {
            alert.IsVisible = true;
            alert.Message = "la categorie est supprimer avec succes";
            alert.Type = "success";
        }
        else
        {
            alert.IsVisible = true;
            alert.Message = "Problème lors de la suppression";
            alert.Type = "danger";
        }

        await NotificationAlert.InvokeAsync(alert);
        categories = await _categorieServicecs.All();

        testCascading.IsVisible = alert.IsVisible;
        testCascading.Message = alert.Message;
        testCascading.Type = alert.Type;

    }
    public void Add()
    {
        modal.Show();
    }

    private async Task ShowNotification()
    {
        alert.IsVisible = true;
        alert.Message = "la categorie est creer avec succes";
        alert.Type = "success";
        await NotificationAlert.InvokeAsync(alert);
    }

    async Task SaveModal()
    {
        modal.CloseModal();
        // Save logic here
        await Task.Delay(1000); // Example delay

        categories = await _categorieServicecs.All();
        await ShowNotification();
    }
}
